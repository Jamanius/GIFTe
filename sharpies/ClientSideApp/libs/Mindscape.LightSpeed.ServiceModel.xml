<?xml version="1.0"?>

<doc>
  <assembly>
    <name>Mindscape.LightSpeed.ServiceModel</name>
  </assembly>
  <members>
    <member name="T:Mindscape.LightSpeed.ServiceModel.DistributedChangeResult">
      <summary>
        Describes the result of a change which has been applied to the server.
      </summary>
      <remarks>
        This is returned by calling SaveChanges() on a
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork">DistributedUnitOfWork</see>.
        When the changes are batched, one result is returned for each batch sent to the server.
      </remarks>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeResult.Success">
      <summary>
        Indicates if the call was successful.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeResult.UpdatedIdentifiers">
      <summary>
        Returns a list of identifiers which have been updated as a result of the change.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeResult.ValidationErrors">
      <summary>
        Returns any validation errors which were triggered on the server as part of this change.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.IdentifierData">
      <summary>
        Holds an identifier value for an entity so it can be used for tracking an identifier change
        as part of a DistributedUnitOfWork change set.
      </summary>
      <remarks>
        When sent across the wire the tracking identifier is used for syncronization between
        the client and the server.
      </remarks>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.IdentifierData.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:Mindscape.LightSpeed.ServiceModel.IdentifierData" /> class.
      </summary>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.IdentifierData.#ctor(Mindscape.LightSpeed.Entity)">
      <summary>
        Initializes the identifier holder with the associated entity.
      </summary>
      <param name="entity">The entity used to initialize the identifier value.</param>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.IdentifierData.TrackingIdentifier">
      <summary>
        The tracking value used to syncronize the client and server within the scope of a change request.
      </summary>
      <remarks>
        The client is responsible for creating the tracking identifier value.
      </remarks>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.IdentifierData.Identifier">
      <summary>
        The identifier value.
      </summary>
      <remarks>
        When initialized with an existing entity this value will be set to the internal Id value of the Entity.
      </remarks>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.IdentifierData.AssociatedEntity">
      <summary>
        The entity associated with this IdentifierData instance.
      </summary>
      <remarks>
        Not part of the WCF contract.
      </remarks>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.ValidationFailureMessage">
      <summary>
        Holds the details of an error message which can be associated with an entity based on the
        tracking identifier.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.ValidationFailureMessage.TrackingIdentifier">
      <summary>
        The tracking value used to syncronize the client and server within the scope of a change request.
      </summary>
      <remarks>
        The client is responsible for creating the tracking identifier value.
      </remarks>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.ValidationFailureMessage.ErrorMessage">
      <summary>
        The text description of the error that has occurred.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.LightSpeedDistributedException">
      <summary>
        Represents a general error that has occured within the LightSpeed distributed extensions
      </summary>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.LightSpeedDistributedException.#ctor">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.LightSpeedDistributedException" /> class.
      </summary>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.LightSpeedDistributedException.#ctor(System.String)">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.LightSpeedDistributedException" /> class.
      </summary>
      <param name="message">The message.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.LightSpeedDistributedException.#ctor(System.String,System.Exception)">
      <summary>
        Initializes a new instance of the <see cref="T:Mindscape.LightSpeed.LightSpeedException" /> class.
      </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.LightSpeedDistributedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        Initializes a new instance of the <see cref="T:Mindscape.LightSpeed.LightSpeedException" /> class.
      </summary>
      <param name="info">
        The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that
        holds the serialized object data about the exception being thrown.
      </param>
      <param name="context">
        The <see cref="T:System.Runtime.Serialization.StreamingContext"></see>
        that contains contextual information about the source or destination.
      </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        The class name is
        null or <see cref="P:System.Exception.HResult"></see> is zero (0).
      </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.DistributedChangeBatch">
      <summary>
        Describes a batch of individual
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail">DistributedChangeDetail</see> changes.
      </summary>
      <remarks>
        This is the scope at which a UnitOfWork.SaveChanges() operates. When communicating with the server
        the SaveChanges() call will be broken down into a number of batches, one for each entity type and then
        up to the size specified by LightSpeedContext.UpdateBatchSize.
      </remarks>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedChangeBatch.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedChangeBatch" />
        class.
      </summary>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedChangeBatch.Add(Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail)">
      <summary>
        Adds a change set to this batch.
      </summary>
      <param name="entry">The change set being added to the batch.</param>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeBatch.EntityType">
      <summary>
        The entity type for this batch.
      </summary>
      <remarks>
        This is only used locally and is not shipped across the wire.
      </remarks>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeBatch.TrackingIdentifier">
      <summary>
        A unique tracking identifier for this batch of changes.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeBatch.Details">
      <summary>
        The individual change sets contained within this batch.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail">
      <summary>
        Describes a set of changes to an entity to be processed by a DistributedUnitOfWork service.
      </summary>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail" />
        class.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail.AssociatedEntity">
      <summary>
        The entity associated with this change set.
      </summary>
      <remarks>
        This is for local handling and is not sent over the wire.
      </remarks>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail.TrackingIdentifier">
      <summary>
        A unique tracking identifier for this change set which is used by the server when
        responding to requests.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail.TypeName">
      <summary>
        The fully qualified type of the entity being operated on, used at the server to
        construct an entity instance.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail.State">
      <summary>
        The current EntityState of the entity.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail.Identifier">
      <summary>
        The current Id identifier value for the entity.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail.ValueData">
      <summary>
        The set of values held by the entity.
      </summary>
      <remarks>
        This represents all of the ValueModel values.
      </remarks>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.ValueModelData">
      <summary>
        Holder class for ValueModel data for use with a
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedChangeDetail">DistributedChangeDetail</see> instance.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.ValueModelData.Key">
      <summary>
        The name of the value property which this value is for.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.ValueModelData.Value">
      <summary>
        The value being held.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService">
      <summary>
        A WCF service which hosts a UnitOfWork making it available for distributed access
        as specified in the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract">IDistributedUnitOfWorkContract</see>
        .
      </summary>
      <remarks>
        This service can either be self hosted by starting it up via a ServiceHost,
        or it can be hosted through IIS .svc hosting.
      </remarks>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract">
      <summary>
        A WCF contract which describes the operations exposes by a DistributedUnitOfWork service.
      </summary>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.Count(System.String)">
      <summary>
        Performs a Count All operation for the specified entity type.
      </summary>
      <param name="typename">The fully qualified type for which to return the Count of entity instances.</param>
      <returns>The current count of this entity type which is stored in the database.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.CountQuery(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Count operation for the specified entity type based on the provided query.
      </summary>
      <param name="typename">The fully qualified type for which to return the Count of entity instances.</param>
      <param name="query">The query which is used to provide criteria for the Count operation.</param>
      <returns>The current count of this entity type as filtered by the provided query.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.Calculate(System.String,System.String,System.String)">
      <summary>
        Performs a Calculate operation for the specified entity type over the nominated attribute.
      </summary>
      <param name="typename">The fully qualified type for which to perform the Calculate operation.</param>
      <param name="calculation">The calculation to be performed.</param>
      <param name="attribute">The attribute of the entity which the operation is to be performed on.</param>
      <returns>The result of the calculation.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.CalculateQuery(System.String,System.String,System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Calculate operation for the specified entity type over the nominated attribute
        with the specified query.
      </summary>
      <param name="typename">The fully qualified type for which to perform the Calculate operation.</param>
      <param name="calculation">The calculation to be performed.</param>
      <param name="attribute">The attribute of the entity which the operation is to be performed on.</param>
      <param name="query">The query which specifies the criteria and filtering to be applied.</param>
      <returns>The result of the calculation.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.CalculateProcedureQuery(Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Performs a Calculate operation using the specified ProcedureQuery.
      </summary>
      <param name="query">The query which specifies the entity type and procedure to be executed.</param>
      <returns>The result of the calculation.</returns>
      <remarks>The entity type must be specified in the ProcedureQuery instance.</remarks>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.Execute(Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Executes a ProcedureQuery and returns the return value of the call.
      </summary>
      <param name="query">The query which specifies the procedure to be executed.</param>
      <returns>The return value from the call.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.FindOne(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Peforms a FindOne operation for the specified entity type using the specified query.
      </summary>
      <param name="typename">The fully qualified type for which to perform the FindOne operation.</param>
      <param name="query">The query which specifies the criteria and filtering required.</param>
      <returns>The single entity result returned by the call.</returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.FindAll(System.String)">
      <summary>
        Performs a FindAll operation for the specified entity type.
      </summary>
      <param name="typename">The fully qualified type for which to perform the FindAll operation.</param>
      <returns>The set of all entities of the requested type.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.Find(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Find operation for the specified entity type based on the supplied query.
      </summary>
      <param name="typename">The fully qualified type for which to perform the Find operation.</param>
      <param name="query">The query to be executed.</param>
      <returns>The set of entities which have been returned as a result of the query.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.FindIdentifiers(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Find operation for the specified entity type based on the supplied query
        where the results are going to be just the identifiers
      </summary>
      <param name="typename">The fully qualified type for which to perform the Find operation.</param>
      <param name="query">The query to be executed.</param>
      <returns>The set of entities which have been returned as a result of the query.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.Find(System.String,Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Performs a Find operation using a ProcedureQuery.
      </summary>
      <param name="typename">The fully qualified type for which to perform the Find operation.</param>
      <param name="query">The procedure query to be executed.</param>
      <returns>The set of entities which have been returned as a result of the query.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.FindTuple(System.String,Mindscape.LightSpeed.Querying.Query,Mindscape.LightSpeed.ServiceModel.EntityTypeMapping[])">
      <summary>
        Performs a Find operation where the result set will be spanning multiple types which will
        be returned as an EntityTuple instance.
      </summary>
      <param name="typename">The fully qualified type for the root entity for which to perform the Find operation.</param>
      <param name="query">The query to be executed</param>
      <param name="mappings">The list of type mappings for the query.</param>
      <returns>An EntityTuple which contains the result sets from the query for each entity type specified.</returns>
      <remarks>
        This operation is typically called when executing a query where the output is to be
        multiple types in the query.

        e.g. select a.*, b.* from EntityA a inner join EntityB b on a.SomeProperty = b.SomeProperty
      </remarks>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.Project(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Find operation where the output is to be a projection across one or
        more types in the query rather than an entity result.
      </summary>
      <param name="typename">The fully qualified type for the root entity for which to perform the Project operation.</param>
      <param name="query">The query to be executed.</param>
      <returns>
        A RawDataSet containing the raw values from the DataReader which was returned
        from executing the query.
      </returns>
      <remarks>
        This operation is typically called when executing a query where the output is to be
        an arbitrary shape given the entities involved in the query.

        e.g. select a.Id, b.Id from EntityA a inner join EntityB b on a.SomeProperty = b.SomeProperty
      </remarks>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.ProjectToType(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Find operation where the output is to be a projection across one or
        more types in the query rather than an entity result and the resulting projection
        is to be mapped to a specified type.
      </summary>
      <param name="typename">The fully qualified type which to project the results into.</param>
      <param name="query">The query to be executed which must contain the entity type.</param>
      <returns>
        An array of objects of the requested type where the data will be mapped in a 1:1 fashion
        from the result set against the properties of the type.
      </returns>
      <remarks>
        This operation is typically called when executing a query where the output is to be
        an known but non entity shape given the entities involved in the query.

        e.g. select a.Name, b.Description from EntityA a inner join EntityB b on a.SomeProperty = b.SomeProperty

        where we have a known type such as:

        public class ABDescriptor
        {
        public string Name { get; set; }
        public string Description { get; set; }
        }
      </remarks>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.ProcessChanges(Mindscape.LightSpeed.ServiceModel.DistributedChangeBatch)">
      <summary>
        Processes a batch of changes to entities which may contain Add/Remove or Update operations.
      </summary>
      <param name="changes">The batch of changes to be executed.</param>
      <returns>
        A <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedChangeResult">DistributedChangeResult</see>
        instance which describes the
        outcome from processing the changes. Any new or updated identifiers will be returned and any
        validation error messages will be attached.
      </returns>
      <remarks>
        This is the service equivilant of SaveChanges()
      </remarks>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.Remove(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Remove operation based on a specified query.
      </summary>
      <param name="typename">The fully qualified type of the entities to be removed.</param>
      <param name="query">The query to be executed.</param>
    </member>
    <member name="E:Mindscape.LightSpeed.ServiceModel.IDistributedUnitOfWorkContract.GeneralFailureOccurred">
      <summary>
        Event which is fired when an unhandled failure occurs within the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService">DistributedUnitOfWorkService</see>
        allowing you to inspect any exceptions that occur.
      </summary>
      <remarks>
        This event is fired by the service to allow you to handle any exceptions as all service
        operations will throw a standard exception back to the client.
      </remarks>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.#ctor(Mindscape.LightSpeed.LightSpeedContext)">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService" /> class.
      </summary>
      <param name="context">The context.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.#ctor(Mindscape.LightSpeed.IUnitOfWork)">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService" /> class.
      </summary>
      <param name="unitOfWork">The unit of work.</param>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.DisposeUnitOfWork">
      <summary>
        Disposes the underlying UnitOfWork.
      </summary>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.Count(System.String)">
      <summary>
        Performs a Count All operation for the specified entity type.
      </summary>
      <param name="typename">The fully qualified type for which to return the Count of entity instances.</param>
      <returns>
        The current count of this entity type which is stored in the database.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.CountQuery(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Count operation for the specified entity type based on the provided query.
      </summary>
      <param name="typename">The fully qualified type for which to return the Count of entity instances.</param>
      <param name="query">The query which is used to provide criteria for the Count operation.</param>
      <returns>
        The current count of this entity type as filtered by the provided query.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.FindOne(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Peforms a FindOne operation for the specified entity type using the specified query.
      </summary>
      <param name="typename">The fully qualified type for which to perform the FindOne operation.</param>
      <param name="query">The query which specifies the criteria and filtering required.</param>
      <returns>
        The single entity result returned by the call.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.Find(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Find operation for the specified entity type based on the supplied query.
      </summary>
      <param name="typename">The fully qualified type for which to perform the Find operation.</param>
      <param name="query">The query to be executed.</param>
      <returns>
        The set of entities which have been returned as a result of the query.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.Find(System.String,Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Performs a Find operation using a ProcedureQuery.
      </summary>
      <param name="typename">The fully qualified type for which to perform the Find operation.</param>
      <param name="query">The procedure query to be executed.</param>
      <returns>
        The set of entities which have been returned as a result of the query.
      </returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.FindAll(System.String)">
      <summary>
        Performs a FindAll operation for the specified entity type.
      </summary>
      <param name="typename">The fully qualified type for which to perform the FindAll operation.</param>
      <returns>
        The set of all entities of the requested type.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.FindTuple(System.String,Mindscape.LightSpeed.Querying.Query,Mindscape.LightSpeed.ServiceModel.EntityTypeMapping[])">
      <summary>
        Performs a Find operation where the result set will be spanning multiple types which will
        be returned as an EntityTuple instance.
      </summary>
      <param name="typename">The fully qualified type for the root entity for which to perform the Find operation.</param>
      <param name="query">The query to be executed</param>
      <param name="mappings">The list of type mappings for the query.</param>
      <returns>
        An EntityTuple which contains the result sets from the query for each entity type specified.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.Project(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Find operation where the output is to be a projection across one or
        more types in the query rather than an entity result.
      </summary>
      <param name="typename">The fully qualified type for the root entity for which to perform the Project operation.</param>
      <param name="query">The query to be executed.</param>
      <returns>
        A RawDataSet containing the raw values from the DataReader which was returned
        from executing the query.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.ProjectToType(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Find operation where the output is to be a projection across one or
        more types in the query rather than an entity result and the resulting projection
        is to be mapped to a specified type.
      </summary>
      <param name="typename">The fully qualified type which to project the results into.</param>
      <param name="query">The query to be executed which must contain the entity type.</param>
      <returns>
        An array of objects of the requested type where the data will be mapped in a 1:1 fashion
        from the result set against the properties of the type.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.ProcessChanges(Mindscape.LightSpeed.ServiceModel.DistributedChangeBatch)">
      <summary>
        Processes the changes.
      </summary>
      <param name="batch">The batch.</param>
      <returns>The result of the processing.</returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.Dispose">
      <summary>
        Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
      </summary>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.Calculate(System.String,System.String,System.String)">
      <summary>
        Performs a Calculate operation for the specified entity type over the nominated attribute.
      </summary>
      <param name="typename">The fully qualified type for which to perform the Calculate operation.</param>
      <param name="calculation">The calculation to be performed.</param>
      <param name="attribute">The attribute of the entity which the operation is to be performed on.</param>
      <returns>
        The result of the calculation.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.CalculateQuery(System.String,System.String,System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Calculate operation for the specified entity type over the nominated attribute
        with the specified query.
      </summary>
      <param name="typename">The fully qualified type for which to perform the Calculate operation.</param>
      <param name="calculation">The calculation to be performed.</param>
      <param name="attribute">The attribute of the entity which the operation is to be performed on.</param>
      <param name="query">The query which specifies the criteria and filtering to be applied.</param>
      <returns>
        The result of the calculation.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.CalculateProcedureQuery(Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Performs a Calculate operation using the specified ProcedureQuery.
      </summary>
      <param name="query">The query which specifies the entity type and procedure to be executed.</param>
      <returns>
        The result of the calculation.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.Execute(Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Executes a ProcedureQuery and returns the return value of the call.
      </summary>
      <param name="query">The query which specifies the procedure to be executed.</param>
      <returns>
        The return value from the call.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.Remove(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Remove operation based on a specified query.
      </summary>
      <param name="typename">The fully qualified type of the entities to be removed.</param>
      <param name="query">The query to be executed.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.FindIdentifiers(System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a Find operation for the specified entity type based on the supplied query and
        returns the identifiers within the resulting set.
      </summary>
      <param name="typename">The fully qualified type for which to perform the Find operation.</param>
      <param name="query">The query to be executed.</param>
      <returns>
        The set of entity identifiers which have been returned as a result of the query.
      </returns>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.UnitOfWork">
      <summary>
        Gets the underlying UnitOfWork which this service is operating over.
      </summary>
    </member>
    <member name="E:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService.GeneralFailureOccurred">
      <summary>
        Event which is fired when an unhandled failure occurs within the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkService">DistributedUnitOfWorkService</see>
        allowing you to inspect any exceptions that occur.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.FactoryEventArgs">
      <summary>
        Event arguments which hold a reference to the ChannelFactory instance which raised the event.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.FactoryEventArgs.Factory">
      <summary>
        The ChannelFactory instance which raised the event.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork">
      <summary>
        A distributed version of the <see cref="T:Mindscape.LightSpeed.UnitOfWork">UnitOfWork</see> which
        can be used to process requests against a remote server. The communication between client and server is
        managed through WCF.
      </summary>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.#ctor">
      <summary>
        Initializes the DistributedUnitOfWork and configures the WCF bindings from application configuration.
      </summary>
      <remarks>
        You must have an endpoint named LightSpeedDistributedUnitOfWorkEndpoint defined which points
        to the DistributedUnitOfWork service endpoint.
        The default context will be used with this overload.
      </remarks>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.#ctor(Mindscape.LightSpeed.LightSpeedContext)">
      <summary>
        Initializes the DistributedUnitOfWork and configures the WCF bindings from application configuration.
      </summary>
      <remarks>
        You must have an endpoint named LightSpeedDistributedUnitOfWorkEndpoint defined which points
        to the DistributedUnitOfWork service endpoint.
      </remarks>
      <param name="context">The LightSpeedContext to be used when creating the DistributedUnitOfWork.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.#ctor(Mindscape.LightSpeed.LightSpeedContext,System.String)">
      <summary>
        Initializes the DistributedUnitOfWork and configures the WCF bindings from application configuration.
      </summary>
      <param name="context">The LightSpeedContext to be used when creating the DistributedUnitOfWork.</param>
      <param name="endpointName">The name of the WCF endpoint which points to the DistributedUnitOfWork service endpoint. </param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.#ctor(Mindscape.LightSpeed.LightSpeedContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>
        Initializes the DistributedUnitOfWork and configures the WCF bindings using the supplied binding and address.
      </summary>
      <param name="address">The EndpointAddress of the DistributedUnitOfWork service endpoint.</param>
      <param name="binding">The Binding to be used when communication with the service endpoint.</param>
      <param name="context">The LightSpeedContext to be used when creating the DistributedUnitOfWork.</param>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Count(Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Returns the number of entities based on
        the supplied <see cref="T:Mindscape.LightSpeed.Querying.Query" />.
      </summary>
      <param name="query">The <see cref="T:Mindscape.LightSpeed.Querying.Query" />.</param>
      <returns>The number of entities.</returns>
      <example>
        <code>
          Query query = new Query(typeof(Product), Entity.Attribute("Price") &gt; 1000000);
          long expensiveProductCount = unitOfWork.Count(query);
        </code>
      </example>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Calculate``1(System.String,System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a database calculation such as COUNT, SUM or AVG.
      </summary>
      <typeparam name="TEntity">The entity type.</typeparam>
      <param name="calculation">A SQL fragment representing the target calculation function. E.g. "SUM".</param>
      <param name="attribute">The target attribute.</param>
      <param name="query">A <see cref="T:Mindscape.LightSpeed.Querying.Query" />.</param>
      <returns>The result of the calculation.</returns>
      <example>
        <code>
          Query query = new Query(Entity.Attribute("OrderId") == 101);
          int sumOfPricesInOrder101 = (int)(unitOfWork.Calculate&lt;Product&gt;("SUM", "Price", query));
        </code>
      </example>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Calculate``1(System.String,System.String)">
      <summary>
        Performs a database calculation such as COUNT, SUM or AVG.
      </summary>
      <typeparam name="TEntity">The entity type.</typeparam>
      <param name="calculation">A SQL fragment representing the target calculation function. E.g. "SUM".</param>
      <param name="attribute">The target attribute.</param>
      <returns>The result of the calculation.</returns>
      <example>
        <code>
          int sumOfPrices = (int)(unitOfWork.Calculate&lt;Product&gt;("SUM", "Price", query));
        </code>
      </example>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Calculate(System.String,System.String,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a database calculation such as COUNT, SUM or AVG.
      </summary>
      <param name="calculation">A SQL fragment representing the target calculation function. E.g. "SUM".</param>
      <param name="attribute">The target attribute.</param>
      <param name="query">A <see cref="T:Mindscape.LightSpeed.Querying.Query" />.</param>
      <returns>The result of the calculation.</returns>
      <example>
        <code>
          Query query = new Query(typeof(Product), Entity.Attribute("OrderId") == 101);
          int sumOfPricesInOrder101 = (int)(unitOfWork.Calculate("SUM", "Price", query));
        </code>
      </example>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Calculate(Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Performs a database calculation (scalar query) using a database stored procedure.
      </summary>
      <param name="query">The database stored procedure query.</param>
      <returns>The result of the query.</returns>
      <example>
        <code>
          ProcedureQuery query = new ProcedureQuery("GetSumOfPrices",
          new ProcedureParameter("orderId", 101));
          int sum = (int)(unitOfWork.Calculate(query));
        </code>
      </example>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Calculate(System.String,Mindscape.LightSpeed.Querying.IdentifierExpression,Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Performs a database calculation such as COUNT, SUM or AVG.
      </summary>
      <param name="calculation">A SQL fragment representing the target calculation function. E.g. "SUM".</param>
      <param name="attribute">The target attribute.</param>
      <param name="query">A <see cref="T:Mindscape.LightSpeed.Querying.Query" />.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        This overload allows you to specify functions on the attribute over which the calculation
        is performed.  It is rarely used directly: it is normally preferable to use a LINQ query instead.
      </remarks>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Detach(Mindscape.LightSpeed.Entity)">
      <summary>
        Detaches the specified <see cref="T:Mindscape.LightSpeed.Entity" /> from the current unit of work.
      </summary>
      <param name="entity">The <see cref="T:Mindscape.LightSpeed.Entity" /> to detach.</param>
      <example>
        <code>
          Customer selectedForEditing = GetSelectedCustomerFromUI();
          unitOfWork.Detach(selectedForEditing);
        </code>
      </example>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindOne(Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Finds a single <see cref="T:Mindscape.LightSpeed.Entity" /> that  matches the
        provided <see cref="T:Mindscape.LightSpeed.Querying.Query" /> specification.
      </summary>
      <param name="query">The query.</param>
      <returns>
        The <see cref="T:Mindscape.LightSpeed.Entity" /> that  matches the
        provided <see cref="T:Mindscape.LightSpeed.Querying.Query" /> specification.
      </returns>
      <example>
        <code>
          Query query = new Query(typeof(Order), Entity.Attribute("Id") == 101);
          Entity order = unitOfWork.FindOne(query);
        </code>
      </example>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find``1(Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Finds the specified query.
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <param name="query">The query.</param>
      <returns>The results of the query.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find``1(Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Finds the specified query.
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <param name="query">The query.</param>
      <returns>The results of the query.</returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find(Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Returns a list of <see cref="T:Mindscape.LightSpeed.Entity" /> objects that
        match the provided <see cref="T:Mindscape.LightSpeed.Querying.Query" /> specification.
      </summary>
      <param name="query">The query.</param>
      <returns>
        A list of <see cref="T:Mindscape.LightSpeed.Entity" /> objects that
        match the provided <see cref="T:Mindscape.LightSpeed.Querying.Query" /> specification.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find(Mindscape.LightSpeed.Querying.Query,Mindscape.LightSpeed.Querying.EntityMap)">
      <summary>
        Gets the set of <see cref="T:Mindscape.LightSpeed.Entity" /> objects that match the provided query specification and returns the results
        as an <see cref="T:Mindscape.LightSpeed.EntityTuple" /> grouped by entity type.
      </summary>
      <param name="query">The query.</param>
      <param name="typeMap">The set of entity types to query for.</param>
      <returns>
        The results of the grouping.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindGroup(Mindscape.LightSpeed.Querying.Query,Mindscape.LightSpeed.EntityTuple)">
      <summary>
        Returns a set of <see cref="T:Mindscape.LightSpeed.Entity" /> objects that match the provided query specification and places the results
        in the provided <see cref="T:Mindscape.LightSpeed.EntityTuple" /> and is grouped by entity type
      </summary>
      <param name="query">The query.</param>
      <param name="results">The results of the grouping.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find``1(Mindscape.LightSpeed.Querying.Query,``0)">
      <summary>
        Finds the specified query.
      </summary>
      <typeparam name="TList">The type of the list.</typeparam>
      <param name="query">The query.</param>
      <param name="results">The results.</param>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Add(Mindscape.LightSpeed.Entity)">
      <summary>
        Registers the specified entity as a pending insert.
      </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Attach(Mindscape.LightSpeed.Entity)">
      <summary>
        Attaches the specified <see cref="T:Mindscape.LightSpeed.Entity" /> to the current unit of work.
      </summary>
      <param name="entity">The <see cref="T:Mindscape.LightSpeed.Entity" /> to attach.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Attach(Mindscape.LightSpeed.Entity,Mindscape.LightSpeed.AttachMode)">
      <summary>
        Attaches the specified <see cref="T:Mindscape.LightSpeed.Entity" /> to the current unit of work using the requested
        mode for attachment
      </summary>
      <param name="entity">The <see cref="T:Mindscape.LightSpeed.Entity" /> to attach.</param>
      <param name="mode">The <see cref="T:Mindscape.LightSpeed.AttachMode" /> to use when attaching this entity to the UnitOfWork</param>
      <returns>
        An instance of the entity which has been attached to the current UnitOfWork,
        see the details for the <see cref="T:Mindscape.LightSpeed.AttachMode" /> being used to determine specific behavior
        of the call
      </returns>
      <example>
        <code>
          Country country = RemoteService.GetCountryFromSessionState("Ruritania");
          unitOfWork.Attach(country, AttachMode.Import);
        </code>
      </example>
      <remarks>
        AttachMode.Import is not supported on the DistributedUnitOfWork.
      </remarks>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Count``1(Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Counts the specified query.
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <param name="query">The query.</param>
      <returns>The number of entities of this type matching the query.</returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Count``1">
      <summary>
        Counts this instance.
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <returns>The number of entities of this type.</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find(System.Type,Mindscape.LightSpeed.Querying.QueryExpression,Mindscape.LightSpeed.Querying.Order,Mindscape.LightSpeed.Querying.Page)">
      <summary>
        Finds a collection of Entities that satisfy the supplied criteria.
      </summary>
      <param name="entityType">The entity type.</param>
      <param name="queryExpression">
        A <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" /> used to filter the
        set of results that should be returned.
      </param>
      <param name="order">
        An <see cref="T:Mindscape.LightSpeed.Querying.Order" /> describing the order in which
        results should be returned.
      </param>
      <param name="page">
        A <see cref="T:Mindscape.LightSpeed.Querying.Page" /> describing the logical page of results
        that should be returned.
      </param>
      <returns>
        A collection of entities that satisfy the supplied criteria.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find``1(Mindscape.LightSpeed.Querying.QueryExpression,Mindscape.LightSpeed.Querying.Order,Mindscape.LightSpeed.Querying.Page)">
      <summary>
        Finds the specified query expression.
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <param name="queryExpression">The query expression.</param>
      <param name="order">The order.</param>
      <param name="page">The page.</param>
      <returns>
        A collection of entities of a given type.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find(System.Type,Mindscape.LightSpeed.Querying.QueryExpression)">
      <summary>
        Finds a collection of entities that satisfy the supplied
        <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" />.
      </summary>
      <param name="entityType">The entity type.</param>
      <param name="queryExpression">
        A <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" /> used to filter the
        set of results that should be returned.
      </param>
      <returns>
        A collection of entities that satisfy the supplied
        <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" />
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find``1(Mindscape.LightSpeed.Querying.QueryExpression)">
      <summary>
        Finds the specified query expression.
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <param name="queryExpression">The query expression.</param>
      <returns>
        A collection of entities of a given type.
      </returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find(System.Type)">
      <summary>
        Finds a collection of entities based on a type of entity.
      </summary>
      <param name="entityType">The entity type.</param>
      <returns>
        A collection of entities of a given type.
      </returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find``1">
      <summary>
        Finds this instance.
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <returns>
        A collection of entities of a given type.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find(Mindscape.LightSpeed.Querying.Query,System.Collections.IList)">
      <summary>
        Returns a list of <see cref="T:Mindscape.LightSpeed.Entity" /> objects that
        match the provided <see cref="T:Mindscape.LightSpeed.Querying.Query" /> specification. Places the
        results into the provided collection.
      </summary>
      <param name="query">The query.</param>
      <param name="results">The collection where the results are placed.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Find(Mindscape.LightSpeed.Querying.ProcedureQuery,System.Collections.IList)">
      <summary>
        Returns a list of <see cref="T:Mindscape.LightSpeed.Entity" /> objects that
        match the provided <see cref="T:Mindscape.LightSpeed.Querying.ProcedureQuery" /> specification. Places the
        results into the provided collection.
      </summary>
      <param name="query">The query.</param>
      <param name="results">The collection where the results are placed.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindOne(System.Type,Mindscape.LightSpeed.Querying.QueryExpression)">
      <summary>
        Finds a single <see cref="T:Mindscape.LightSpeed.Entity" /> that satisifies the provided
        <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" />.
      </summary>
      <param name="entityType">The entity type.</param>
      <param name="queryExpression">
        A <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" /> used to match
        the <see cref="T:Mindscape.LightSpeed.Entity" /> that should be returned.
      </param>
      <returns>
        A single <see cref="T:Mindscape.LightSpeed.Entity" /> that satisfies the supplied
        <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" />.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindOne``1(Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Finds a single <see cref="T:Mindscape.LightSpeed.Entity" /> that  matches the
        provided <see cref="T:Mindscape.LightSpeed.Querying.Query" /> specification.
      </summary>
      <param name="query">The query.</param>
      <returns>
        The <see cref="T:Mindscape.LightSpeed.Entity" /> that  matches the
        provided <see cref="T:Mindscape.LightSpeed.Querying.Query" /> specification.
      </returns>
      <example>
        <code>
          Query query = new Query(Entity.Attribute("Id") == 101);
          Order order = unitOfWork.FindOne&lt;Order&gt;(query);
        </code>
      </example>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindOne``1(Mindscape.LightSpeed.Querying.QueryExpression)">
      <summary>
        Finds a single <see cref="T:Mindscape.LightSpeed.Entity" /> that satisfies the provided
        <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" />.
      </summary>
      <param name="queryExpression">
        A <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" /> used to match
        the <see cref="T:Mindscape.LightSpeed.Entity" /> that should be returned.
      </param>
      <typeparam name="TEntity">The entity type.</typeparam>
      <returns>
        A single <see cref="T:Mindscape.LightSpeed.Entity" /> that satisfies the supplied
        <see cref="T:Mindscape.LightSpeed.Querying.QueryExpression" />.
      </returns>
      <example>
        <code>
          Customer customer = unitOfWork.FindOne&lt;Customer&gt;(Entity.Attribute("AccountNo") == "ABC123");
        </code>
      </example>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindById(System.Type,System.Object)">
      <summary>
        Finds a single <see cref="T:Mindscape.LightSpeed.Entity" /> by its id.
      </summary>
      <param name="entityType">The type of <see cref="T:Mindscape.LightSpeed.Entity" /> to find.</param>
      <param name="id">The id of the <see cref="T:Mindscape.LightSpeed.Entity" /></param>
      <returns>
        An <see cref="T:Mindscape.LightSpeed.Entity" />, or null if no <see cref="T:Mindscape.LightSpeed.Entity" /> was found
        with the specified id value.
      </returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindById``1(System.Object)">
      <summary>
        Finds a single <see cref="T:Mindscape.LightSpeed.Entity" /> by its id.
      </summary>
      <typeparam name="TEntity">The type of <see cref="T:Mindscape.LightSpeed.Entity" /> to find.</typeparam>
      <param name="id">The id of the <see cref="T:Mindscape.LightSpeed.Entity" /></param>
      <returns>
        An <see cref="T:Mindscape.LightSpeed.Entity" />, or null if no <see cref="T:Mindscape.LightSpeed.Entity" /> was found
        with the specified id value.
      </returns>
      <example>
        <code>
          int customerId = Int32.Parse(Request.QueryString["id"]);
          Customer customer = unitOfWork.FindById&lt;Customer&gt;(customerId);
        </code>
      </example>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindOne``1(System.Object)">
      <summary>
        Obsolete.  Use
        <see cref="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindById(System.Type,System.Object)" />
        instead.
      </summary>
      <typeparam name="TEntity">The type of <see cref="T:Mindscape.LightSpeed.Entity" /> to find.</typeparam>
      <param name="id">The id of the <see cref="T:Mindscape.LightSpeed.Entity" /></param>
      <returns>
        An <see cref="T:Mindscape.LightSpeed.Entity" />, or null if no <see cref="T:Mindscape.LightSpeed.Entity" /> was found
        with the specified id value.
      </returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindOne(System.Type,System.Object)">
      <summary>
        Obsolete.  Use
        <see cref="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindById(System.Type,System.Object)" />
        instead.
      </summary>
      <param name="entityType">The type of <see cref="T:Mindscape.LightSpeed.Entity" /> to find.</param>
      <param name="id">The id of the <see cref="T:Mindscape.LightSpeed.Entity" /></param>
      <returns>
        An <see cref="T:Mindscape.LightSpeed.Entity" />, or null if no <see cref="T:Mindscape.LightSpeed.Entity" /> was found
        with the specified id value.
      </returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Remove(Mindscape.LightSpeed.Entity)">
      <summary>
        Registers the specified entity as a pending delete.
      </summary>
      <param name="entity">The entity.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Remove(Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Deletes entities by executing SQL directly against the database. NB. No entities are
        materialized and therefore no callbacks run, entities are not removed from the second-level
        cache or full-text search index etc.
      </summary>
      <param name="query">A query used to determine which entities to delete.</param>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.SaveChanges(System.Boolean)">
      <summary>
        Flushes pending changes to the database.
      </summary>
      <param name="reset">
        if set to <c>true</c> then clears all existing entities
        from the <see cref="T:Mindscape.LightSpeed.UnitOfWorkBase" /> so that they will be reloaded on subsequent
        queries.
      </param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Project(Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Returns an <see cref="T:System.Data.IDataReader" /> containing the results of the specified
        projection query. A projection query returns only a subset of fields of an entity.
        At lease one field name must have been added to the
        <see cref="P:Mindscape.LightSpeed.Querying.Query.Projection" />
        collection.
      </summary>
      <param name="query">The query.</param>
      <returns>
        An <see cref="T:System.Data.IDataReader" /> containing the results of the specified
        projection query.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Project(Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Returns an <see cref="T:System.Data.IDataReader" /> containing the results of the specified
        projection query. A projection query returns only a subset of fields of an entity.
        At lease one field name must have been added to the
        <see cref="P:Mindscape.LightSpeed.Querying.Query.Projection" />
        collection.
      </summary>
      <param name="query">The query.</param>
      <returns>
        An <see cref="T:System.Data.IDataReader" /> containing the results of the specified
        projection query.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Project(Mindscape.LightSpeed.Querying.Query,System.Type)">
      <summary>
        Performs a query with a projection, and materialises the results as the specified type.
      </summary>
      <param name="query">The query to be performed.</param>
      <param name="projectedType">The type of object to be materialised from the query results.</param>
      <returns>
        A list of objects of the specified type.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Project``1(Mindscape.LightSpeed.Querying.Query)">
      <summary>
        Projects the specified query.
      </summary>
      <typeparam name="T"></typeparam>
      <param name="query">The query.</param>
      <returns>
        A list of objects of the specified type.
      </returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Dispose">
      <summary>
        Frees resources and disposes the <see cref="T:Mindscape.LightSpeed.UnitOfWork" />
      </summary>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.GetEnumerator">
      <summary>
        Get an enumerator over the entities currently attached to this unit of work
      </summary>
      <returns>Entities enumerator</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        Get an enumerator over the entities currently attached to this unit of work
      </summary>
      <returns>Entities enumerator</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Execute(Mindscape.LightSpeed.Querying.ProcedureQuery)">
      <summary>
        Executes a database stored procedure.
      </summary>
      <param name="query">The database stored procedure.</param>
      <returns>
        The number of rows affected by the query.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Update(Mindscape.LightSpeed.Querying.Query,System.Object)">
      <summary>
        Updates entities by executing SQL directly against the database. NB. No entities are
        materialized and therefore no callbacks run, cached entities are not updated in the second-level
        cache or full-text search index etc.
      </summary>
      <param name="query">A query used to determine the entities to update.</param>
      <param name="attributes">
        The attributes to be updated. This argument can either be an
        <see cref="T:System.Collections.Generic.IDictionary`2" />, or, an object whose properties correspond to the
        target attributes (useful when using an anonymous type).
      </param>
      <remarks>
        This is not supported with a DistributedUnitOfWork
      </remarks>
      <exception cref="T:System.NotImplementedException">NotImplementedException</exception>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
        A distributed unit of work does not support participating in transaction scopes
      </summary>
      <param name="isolationLevel">Ignored</param>
      <returns>Not supported</returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.BeginTransaction">
      <summary>
        A distributed unit of work does not support participating in transaction scopes
      </summary>
      <returns>Not supported</returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Search(Mindscape.LightSpeed.Querying.Query,System.Type[])">
      <summary>
        Search queries are not currently supported in a Distributed Unit of Work
      </summary>
      <param name="query">Ignored</param>
      <param name="types">Ignored</param>
      <returns>Not supported</returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Search(System.String,System.Type[])">
      <summary>
        Search queries are not currently supported in a Distributed Unit of Work
      </summary>
      <param name="searchQuery">Ignored</param>
      <param name="types">Ignored</param>
      <returns>Not supported</returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.PrepareCommand(System.Data.IDbCommand)">
      <summary>
        A distributed unit of work does not support preparing database commands
      </summary>
      <param name="command">Ignored</param>
      <returns>Not supported</returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FindBySql``1(System.Data.IDbCommand)">
      <summary>
        A distributed unit of work does not support FindBySql as it cannot support handling of database command objects
      </summary>
      <param name="command">Ignored</param>
      <returns>Not supported</returns>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Import``1(System.Object)">
      <summary>
        A distributed unit of work does not support importing an arbitrary object into an entity
      </summary>
      <param name="source">Ignored</param>
      <typeparam name="TEntity">Ignored</typeparam>
      <returns>Not supported</returns>
    </member>
    <member name="E:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FactoryCreated">
      <summary>
        An event which is raised when a ChannelFactory is created by the DistributedUnitOfWork.
      </summary>
    </member>
    <member name="E:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.Disposed">
      <summary>
        An event which is raised when the DistributedUnitOfWork is being disposed.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.SupportsCompiledQueries">
      <summary>
        Indicates if the UnitOfWork can support generating compiled queries
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork.FactoryCreatedEventHandler">
      <summary>
        Delegate which describes an event for the creation of a ChannelFactory.
      </summary>
      <param name="sender">The event sender.</param>
      <param name="args">The arguments describing the ChannelFactory which raised the request.</param>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory">
      <summary>
        Factory class for creating <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork" /> instances
      </summary>
      <example>
        To use set the following configuration option on your lightSpeedContext entry:
        factoryClass="Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory, Mindscape.LightSpeed.ServiceModel"
      </example>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory.#ctor">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory" /> class.
      </summary>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory" /> class.
      </summary>
      <param name="binding">The binding.</param>
      <param name="endpointAddress">The endpoint address.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory.Create(Mindscape.LightSpeed.LightSpeedContext)">
      <summary>
        Creates and returns a new <see cref="T:Mindscape.LightSpeed.IUnitOfWork" />
      </summary>
      <param name="context">An associated <see cref="T:Mindscape.LightSpeed.LightSpeedContext" />.</param>
      <returns>A new <see cref="T:Mindscape.LightSpeed.IUnitOfWork" /></returns>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory`1">
      <summary>
        Factory class for creating <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork" /> instances
      </summary>
      <typeparam name="TUnitOfWork">The specifically typed UnitOfWork to be created</typeparam>
      <example>
        To use set the following configuration option on your lightSpeedContext entry:
        factoryClass="Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory, Mindscape.LightSpeed.ServiceModel"
      </example>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory`1.#ctor">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory`1" /> class.
      </summary>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory`1" /> class.
      </summary>
      <param name="binding">The binding.</param>
      <param name="endpointAddress">The endpoint address.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWorkFactory`1.Create(Mindscape.LightSpeed.LightSpeedContext)">
      <summary>
        Creates and returns a new <see cref="T:Mindscape.LightSpeed.IUnitOfWork" />
      </summary>
      <param name="context">An associated <see cref="T:Mindscape.LightSpeed.LightSpeedContext" />.</param>
      <returns>A new <see cref="T:Mindscape.LightSpeed.IUnitOfWork" /></returns>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.EntityServiceBase`1">
      <summary>
        A base class for custom WCF services which provides handling and access to the designated
        typed UnitOfWork.
      </summary>
      <typeparam name="T">The type of the typed UnitOfWork.</typeparam>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.EntityServiceBase`1.#ctor(System.String)">
      <summary>
        Initializes a new instance of the <see cref="T:Mindscape.LightSpeed.ServiceModel.EntityServiceBase`1" /> class.
      </summary>
      <param name="contextName">Name of the LightSpeedContext to be used.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.EntityServiceBase`1.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>
        Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.
      </summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The host that is currently being built.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.EntityServiceBase`1.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>
        Provides the ability to pass custom data to binding elements to support the contract implementation.
      </summary>
      <param name="serviceDescription">The service description of the service.</param>
      <param name="serviceHostBase">The host of the service.</param>
      <param name="endpoints">The service endpoints.</param>
      <param name="bindingParameters">Custom objects to which binding elements have access.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.EntityServiceBase`1.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>
        Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.
      </summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host that is currently being constructed.</param>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.EntityServiceBase`1.UnitOfWork">
      <summary>
        Gets or sets the typed UnitOfWork.
      </summary>
      <value>
        The typed UnitOfWork instance.
      </value>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.EntityTypeMapping">
      <summary>
        Describes the aliasing applied to an entity when involved in a query.
      </summary>
      <remarks>
        Used for serialization of a query in a
        <see cref="T:Mindscape.LightSpeed.ServiceModel.DistributedUnitOfWork">DistributedUnitOfWork</see>.
      </remarks>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.EntityTypeMapping.TypeName">
      <summary>
        The fully qualified name of the type.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.EntityTypeMapping.Alias">
      <summary>
        The alias that has been applied to this type.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.ExceptionEventArgs">
      <summary>
        Event arguments which describe an exception which has been raised.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.ExceptionEventArgs.InnerException">
      <summary>
        Gets or sets the inner exception.
      </summary>
      <value>
        The inner exception.
      </value>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.NetDataContractOperationBehavior">
      <summary>
        A WCF operation behavior implementation which applies the NetDataContractSerializer to
        be used for DataContract serialization.
      </summary>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.NetDataContractOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.NetDataContractOperationBehavior" /> class.
      </summary>
      <param name="operation">The operation.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.NetDataContractOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription,System.ServiceModel.DataContractFormatAttribute)">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.NetDataContractOperationBehavior" /> class.
      </summary>
      <param name="operation">The operation.</param>
      <param name="dataContractFormatAttribute">The data contract format attribute.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.NetDataContractOperationBehavior.CreateSerializer(System.Type,System.String,System.String,System.Collections.Generic.IList{System.Type})">
      <summary>
        Creates an instance of a class that inherits from
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> for serialization and deserialization operations.
      </summary>
      <param name="type">The <see cref="T:System.Type" /> to create the serializer for.</param>
      <param name="name">The name of the generated type.</param>
      <param name="ns">The namespace of the generated type.</param>
      <param name="knownTypes">
        An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Type" />
        that contains known types.
      </param>
      <returns>
        An instance of a class that inherits from the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />
        class.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.NetDataContractOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
      <summary>
        Creates an instance of a class that inherits from
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> for serialization and deserialization operations with an
        <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace.
      </summary>
      <param name="type">The type to serialize or deserialize.</param>
      <param name="name">The name of the serialized type.</param>
      <param name="ns">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace of the serialized type.</param>
      <param name="knownTypes">
        An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Type" />
        that contains known types.
      </param>
      <returns>
        An instance of a class that inherits from the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />
        class.
      </returns>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.RawDataRow">
      <summary>
        A row of data which has been returned from a database reader on the server.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.RawDataRow.Data">
      <summary>
        The individual data items held by this row.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.RawDataSet">
      <summary>
        A set of data rows which have been returned from a database reader on the server.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.RawDataSet.ColumnNames">
      <summary>
        The column names involved in the data set.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.RawDataSet.Rows">
      <summary>
        The row data for this data set.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.UnitOfWorkMessageInspector`1">
      <summary>
        A WCF Message Inspector which creates a UnitOfWork instance to be held with the current
        OperationContext allowing a UnitOfWork per session implementation.
      </summary>
      <typeparam name="T">The type of the UnitOfWork which is to be created.</typeparam>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.UnitOfWorkMessageInspector`1.#ctor(System.String)">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.UnitOfWorkMessageInspector`1" /> class.
      </summary>
      <param name="contextName">Name of the context.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.UnitOfWorkMessageInspector`1.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
      <summary>
        Called after an inbound message has been received but before the message is dispatched to the intended operation.
      </summary>
      <param name="request">The request message.</param>
      <param name="channel">The incoming channel.</param>
      <param name="instanceContext">The current service instance.</param>
      <returns>
        The object used to correlate state. This object is passed back in the
        <see
          cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
        method.
      </returns>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.UnitOfWorkMessageInspector`1.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
      <summary>
        Called after the operation has returned but before the reply message is sent.
      </summary>
      <param name="reply">The reply message. This value is null if the operation is one way.</param>
      <param name="correlationState">
        The correlation object returned from the
        <see
          cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
        method.
      </param>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.UnitOfWorkPerCallScopeExtension`1">
      <summary>
        A WCF extension for the OperationContext.
      </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Mindscape.LightSpeed.ServiceModel.UnitOfWorkPerCallScopeExtension`1.#ctor(`0)">
      <summary>
        Initializes a new instance of the
        <see cref="T:Mindscape.LightSpeed.ServiceModel.UnitOfWorkPerCallScopeExtension`1" /> class.
      </summary>
      <param name="unitOfWork">The unit of work.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.UnitOfWorkPerCallScopeExtension`1.Attach(System.ServiceModel.OperationContext)">
      <summary>
        Enables an extension object to find out when it has been aggregated. Called when the extension is added to the
        <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.
      </summary>
      <param name="owner">The extensible object that aggregates this extension.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.UnitOfWorkPerCallScopeExtension`1.Detach(System.ServiceModel.OperationContext)">
      <summary>
        Enables an object to find out when it is no longer aggregated. Called when an extension is removed from the
        <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.
      </summary>
      <param name="owner">The extensible object that aggregates this extension.</param>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.UnitOfWorkPerCallScopeExtension`1.UnitOfWork">
      <summary>
        The strongly typed UnitOfWork instance which is held by the extension instance.
      </summary>
    </member>
    <member name="P:Mindscape.LightSpeed.ServiceModel.UnitOfWorkPerCallScopeExtension`1.Current">
      <summary>
        Returns the current instance of this extension as held in the current OperationContext.
      </summary>
    </member>
    <member name="T:Mindscape.LightSpeed.ServiceModel.UseNetDataContractSerializerAttribute">
      <summary>
        A helper class which will change the behavior of the operation to use the NetDataContractSerializer.
      </summary>
      <remarks>
        This attribute can be applied either at a contract or an operation level.
      </remarks>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.UseNetDataContractSerializerAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>
        Adds the binding parameters.
      </summary>
      <param name="description">The description.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.UseNetDataContractSerializerAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>
        Applies the client behavior.
      </summary>
      <param name="description">The description.</param>
      <param name="proxy">The proxy.</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.UseNetDataContractSerializerAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>
        Applies the dispatch behavior for the operation which is to replace
        the DataContract serializer with the NetDataContractSerializer behavior.
      </summary>
      <param name="description">The description of the Operation.</param>
      <param name="dispatch">The DispatchOperation instance (not used for this implementation).</param>
    </member>
    <member
      name="M:Mindscape.LightSpeed.ServiceModel.UseNetDataContractSerializerAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>
        Validates the specified description.
      </summary>
      <param name="description">The description.</param>
    </member>
  </members>
</doc>